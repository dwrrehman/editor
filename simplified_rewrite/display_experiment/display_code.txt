




static void display(void) {
	nat row = 0, column = 0, im = om, in = on, on1 = 0, om1 = 0;

	static nat x = 0;
	static nat origin_row = 0, origin_column = 0;

	if (not x) {
		printf("\033[6n"); fflush(stdout);
		scanf("\033[%llu;%lluR", &origin_row, &origin_column);
		x = 1;
	}
	
	printf("\033[%llu;%lluH", origin_row, origin_column);
	printf("\033[?25l");
	fflush(stdout);

	while (in < n) {
		while (im <= m) {
			if (in == cn and im == cm) printf("\0337");
			if (in >= n or im >= text[in].count) break;
			const char c = text[in].data[im];
			if (c == 10) { im++; goto print_newline; }
			else if (c == 9) { do { column++; printf(" "); } while (column % 8); } 
			else { printf("%c", c); if (not zero_width(c)) column++; }
			im++; continue;
			print_newline: printf("\033[K\n");
			row++; column = 0;

			if (screen_row == 1) { on1 = i; om1 = j; newline_index1 = (nat) length - 1; }
		}
		in++; im = 0;
	}

	
	if (not shifted and cursor_row == window_rows - 1) {

		
		cursor_row--; 

		row--; column = 0; 

		on = on1; om = om1; 
		shifted = true; 
		goto print_newline;
	}

	printf("\033[K\n\033[K\0338\033[?25h");
	fflush(stdout);
}













static void display(nat display_mode) {
	static char* screen = NULL;
	static nat screen_size = 0, window_rows = 0, window_columns = 0, cursor_column = 0, cursor_row = 0, om = 0, on = 0;
	
	struct winsize window = {0};
	ioctl(1, TIOCGWINSZ, &window); // make this a commnd
	if (not window.ws_row or not window.ws_col) { window.ws_row = 24; window.ws_col = 60; }
	if (window.ws_row != window_rows or window.ws_col != window_columns) {
		window_rows = window.ws_row;
		window_columns = window.ws_col - 1; 
		screen_size = 32 + (window_rows + 2) * (window_columns * 4 + 5);
		screen = realloc(screen, (size_t) screen_size);
	}
	bool shifted = false;
	nat screen_column = 0, screen_row = 0, start = window_columns * 4 + 5, on1 = 0, om1 = 0, i = on, j = om; // del start
	int length = snprintf(screen, screen_size, "\033[?25l\033[H");//modify keep hide op

	while (i <= n) {
		while (j <= m) {
			if (i == cn and j == cm) { cursor_row = screen_row; cursor_column = screen_column; }
			if (i >= n or j >= text[i].count) break;
			const char c = text[i].data[j];

			if (c == 10) { next_char_newline: j++; goto print_newline; }
			else if (c == 9) {
				do {
					if (screen_column >= window_columns) goto next_char_newline; screen_column++;
					length += snprintf(screen + length, screen_size, " ");
				} while (screen_column % 8);
			} else {
				if (zero_width(c)) goto print_char;
				if (screen_column >= window_columns) goto print_newline; screen_column++; 
				print_char: length += snprintf(screen + length, screen_size, "%c", c);
			}

			j++; continue;
			print_newline: length += snprintf(screen + length, screen_size, "\033[K");
			if (display_mode == 1 or screen_row >= window_rows - 1) goto print_cursor; // d
			length += snprintf(screen + length, screen_size, "\r\n");//just \n
			screen_row++; screen_column = 0;
			if (screen_row == 1) { on1 = i; om1 = j; }//k
		}
		i++; j = 0;
	}

	if (not shifted and cursor_row == window_rows - 1) {//k
		





			prb  dtct end    c r   at end          edit  o r   o c      and log o on om



						to know  c r   we  must   do    soft wrap ourselvssssss









		 

		cursor_row--; screen_row--; screen_column = 0;
		on = on1; om = om1; shifted = true; goto fill_screen;
		
	} 

	if (screen_row < window_rows) goto print_newline;  //d
	print_cursor: length += snprintf(screen + length, screen_size, "\033[%llu;%lluH\033[?25h", cursor_row + 1, cursor_column + 1);
	write(1, screen, (size_t) length); //k
}
















if (screen_row == 1) { on1 = i; om1 = j; newline_index1 = (nat) length - 1; }







if (not shifted and cursor_row == window_rows - 1) {
		shift_down: screen[newline_index1] = 13; cursor_row--; screen_row--; screen_column = 0; 
		on = on1; om = om1; shifted = true; goto print_newline;
	}








if (should_move_origin_forwards and screen_row == 1) {
				screen_row = 0; length = 9; should_move_origin_forwards = false; on = i; om = j;
			}







*/




static void string_display(void) {
	printf("\033[H\033[J");
	printf("displaying the text { (m=%llu,n=%llu)(cm=%llu,cn=%llu) }: \n", m, n, cm, cn);
	for (nat i = 0; i < n; i++) {
		if (i and not text[i].count) abort();
		for (nat j = 0; j < m; j++) 
			if (j < text[i].count) printf("%c", text[i].data[j]); 
	}
	puts("");
}
